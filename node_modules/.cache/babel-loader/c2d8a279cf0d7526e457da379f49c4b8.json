{"ast":null,"code":"import _regeneratorRuntime from\"D:/reactapp/netflix-clone/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/reactapp/netflix-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/reactapp/netflix-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useState,useEffect}from'react';import'./Row.css';import YouTube from'react-youtube';import axios from\"./axios\";import movieTrailer from\"movie-trailer\";var base_url=\"https://images.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:'390',width:'100%',playerVars:{// https://developers.google.com/youtube/player_parameters\nautoplay:1}};var handleClick=function handleClick(movie){console.log(movie);if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||(movie===null||movie===void 0?void 0:movie.original_title)||(movie===null||movie===void 0?void 0:movie.original_name)||(movie===null||movie===void 0?void 0:movie.title)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get('v'));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"row__title\",children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.title},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["D:/reactapp/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","YouTube","axios","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","console","log","name","original_title","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":"yZAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,uCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA4C,IAA9BC,CAAAA,KAA8B,MAA9BA,KAA8B,CAAvBC,QAAuB,MAAvBA,QAAuB,CAAbC,UAAa,MAAbA,UAAa,eAEZT,QAAQ,CAAC,EAAD,CAFI,wCAEjCU,MAFiC,eAEzBC,SAFyB,8BAIJX,QAAQ,CAAC,EAAD,CAJJ,yCAIjCY,UAJiC,eAIrBC,aAJqB,eAMxCZ,SAAS,CAAE,UAAM,SAEEa,CAAAA,SAFF,qIAEb,qKAC2BX,CAAAA,KAAK,CAACY,GAAN,CAAUP,QAAV,CAD3B,QACUQ,OADV,eAEIL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFJ,gCAGWF,OAHX,wDAFa,4CAQbF,SAAS,GAEZ,CAVQ,CAUN,CAACN,QAAD,CAVM,CAAT,CAYA,GAAMW,CAAAA,IAAI,CAAG,CACTC,MAAM,CAAE,KADC,CAETC,KAAK,CAAE,MAFE,CAGTC,UAAU,CAAE,CACV;AACAC,QAAQ,CAAE,CAFA,CAHH,CAAb,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAY,CAC5BC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,GAAGb,UAAH,CAAe,CACXC,aAAa,CAAC,EAAD,CAAb,CACH,CAFD,IAEK,CACDT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEG,IAAP,IAAeH,KAAf,SAAeA,KAAf,iBAAeA,KAAK,CAAEI,cAAtB,IAAwCJ,KAAxC,SAAwCA,KAAxC,iBAAwCA,KAAK,CAAEK,aAA/C,IAAgEL,KAAhE,SAAgEA,KAAhE,iBAAgEA,KAAK,CAAElB,KAAvE,GAAgF,EAAjF,CAAZ,CACCwB,IADD,CACM,SAACC,GAAD,CAAS,CAEX,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACAvB,aAAa,CAACoB,SAAS,CAAClB,GAAV,CAAc,GAAd,CAAD,CAAb,CAEH,CAND,EAMGsB,KANH,CAMS,SAAAC,KAAK,QAAIZ,CAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ,CAAJ,EANd,EAOH,CACJ,CAbD,CAgBA,mBACI,aAAK,SAAS,CAAC,KAAf,wBACI,WAAI,SAAS,CAAC,YAAd,UAA4B/B,KAA5B,EADJ,cAEI,YAAK,SAAS,CAAC,cAAf,UACKG,MAAM,CAAC6B,GAAP,CAAW,SAAAd,KAAK,qBACb,YAEI,OAAO,CAAI,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFf,CAGI,SAAS,uBAAiBhB,UAAU,EAAI,kBAA/B,CAHb,CAII,GAAG,WAAKJ,QAAL,SAAgBI,UAAU,CAAGgB,KAAK,CAACe,WAAT,CAAsBf,KAAK,CAACgB,aAAtD,CAJP,CAKI,GAAG,CAAEhB,KAAK,CAAClB,KALf,EACSkB,KAAK,CAACiB,EADf,CADa,EAAhB,CADL,EAFJ,CAcK9B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAdnB,GADJ,CAoBH,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport axios from \"./axios\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://images.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    \r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect( () => {\r\n        \r\n        async function fetchData() {\r\n            const request  = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n    \r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        }\r\n    };\r\n\r\n    const handleClick = (movie)  => {\r\n        console.log(movie);\r\n        if(trailerUrl) {\r\n            setTrailerUrl(\"\");\r\n        }else{\r\n            movieTrailer(movie?.name || movie?.original_title || movie?.original_name || movie?.title || \"\")\r\n            .then((url) => {\r\n                \r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n            }).catch(error => console.log(error));\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row__title\">{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie => (\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick = {() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`} \r\n                        alt={movie.title} \r\n\r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}