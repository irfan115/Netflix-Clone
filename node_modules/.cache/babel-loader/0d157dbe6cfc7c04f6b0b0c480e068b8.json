{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\reactapp\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport axios from \"./axios\";\nconst base_url = \"https://images.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"row__title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.title\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: \"m9oSZo-TvFI\",\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/reactapp/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","YouTube","axios","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","map","poster_path","backdrop_path","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,QAAQ,GAAG,uCAAjB;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA4C;AAAA;;AAExC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAE,MAAM;AAEb,mBAAeY,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAI,MAAMX,KAAK,CAACY,GAAN,CAAUR,QAAV,CAAvB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AAEDD,IAAAA,SAAS;AAEZ,GAVQ,EAUN,CAACN,QAAD,CAVM,CAAT;AAYA,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHH,GAAb;;AASA,QAAMC,WAAW,GAAIC,KAAD,IAAY;AAC5B,QAAGb,UAAH,EAAe;AACXC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH;AACJ,GAJD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAA4BN;AAA5B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,MAAM,CAACgB,GAAP,CAAWD,KAAK,iBACb;AACI,QAAA,OAAO,EAAI,MAAMD,WAAW,CAACC,KAAD,CADhC;AAGI,QAAA,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAH/D;AAII,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGgB,KAAK,CAACE,WAAT,GAAsBF,KAAK,CAACG,aAAc,EAJ3E;AAKI,QAAA,GAAG,EAAEH,KAAK,CAAClB;AALf,SAESkB,KAAK,CAACI,EAFf;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,EAcKjB,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAC,aAAjB;AAA+B,MAAA,IAAI,EAAEO;AAArC;AAAA;AAAA;AAAA;AAAA,YAdnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GAtDQb,G;;KAAAA,G;AAwDT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport axios from \"./axios\";\r\n\r\nconst base_url = \"https://images.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    \r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect( () => {\r\n        \r\n        async function fetchData() {\r\n            const request  = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n    \r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        }\r\n    };\r\n\r\n    const handleClick = (movie)  => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl('');\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row__title\">{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie => (\r\n                    <img \r\n                        onClick = {() => handleClick(movie)}\r\n                        key={movie.id}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path: movie.backdrop_path}`} \r\n                        alt={movie.title} \r\n\r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId=\"m9oSZo-TvFI\" opts={opts} />}\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Row;"]},"metadata":{},"sourceType":"module"}